/**
 * forgetPassword.controller.js
 * 
 * Ce fichier d√©finit les contr√¥leurs pour la gestion du processus de r√©initialisation
 * de mot de passe oubli√©. Il contient deux fonctions principales : une pour demander
 * la r√©initialisation et une autre pour appliquer le nouveau mot de passe.
 * 
 * Les fonctionnalit√©s incluent:
 * - G√©n√©ration de tokens JWT s√©curis√©s pour la r√©initialisation
 * - Envoi d'emails via Nodemailer avec liens de r√©initialisation
 * - V√©rification des tokens et mise √† jour s√©curis√©e des mots de passe
 * - Journalisation d√©taill√©e pour faciliter le debugging
 * - Gestion des erreurs pour chaque √©tape du processus
 */

const bcrypt = require("bcryptjs");
const jwt = require("jsonwebtoken");
const User = require("../models/usermodel");
const nodemailer = require("nodemailer");
require("dotenv").config();

// Contr√¥leur qui g√®re la demande de r√©initialisation de mot de passe
// 1. V√©rifie l'existence de l'email dans la base de donn√©es
// 2. G√©n√®re un token JWT valide 10 minutes contenant l'ID de l'utilisateur
// 3. Envoie un email avec un lien de r√©initialisation contenant ce token
const forgetPassword = async (req, res) => {
    try {
      console.log("Requ√™te re√ßue :", req.body);
      // Find the user by email
      const { email, frontendUrl } = req.body;
      console.log("Recherche de l'email :", email); 
      const user = await User.findOne({ email });
      console.log("R√©sultat MongoDB :", user);

  
      // If user not found, send error message
      if (!user) {
        return res.status(404).send({ message: "User not found" });
      }
  
      // Generate a unique JWT token for the user that contains the user's id
      const token = jwt.sign({ userId: user._id }, process.env.JWT_SECRET_KEY, {expiresIn: "10m",});

      console.log("Token g√©n√©r√© :", token); // üîç V√©rifie si le token est bien g√©n√©r√©
  
      // Send the token to the user's email
      const transporter = nodemailer.createTransport({
        host: process.env.SMTP_HOST,
        port: process.env.SMTP_PORT,
        auth: {
          user: process.env.EMAIL,
          pass: process.env.PASSWORD_APP_EMAIL,
        },
      });
  
      // Email configuration
      const resetUrl = `${frontendUrl}/reset/${token}`;
      console.log("URL de r√©initialisation :", resetUrl);

      const mailOptions = {
        from: process.env.EMAIL,
        to: req.body.email,
        subject: "CollecKeytion - Reset Password",
        html: `<h1>Reset Your Password</h1>
      <p>Click on the following link to reset your password:</p>
      <a href="${resetUrl}">Reset Your Password</a>
      <p>The link will expire in 10 minutes.</p>
      <p>If you didn't request a password reset, please ignore this email.</p>`,
      };
  
      // Send the email
      transporter.sendMail(mailOptions, (err) => {
        if (err) {
          return res.status(500).send({ message: err.message });
        }
        res.status(200).send({ message: "Email sent" });
      });
    } catch (err) {
      res.status(500).send({ message: err.message });
    }
  };

  // Contr√¥leur qui valide le token de r√©initialisation et met √† jour le mot de passe
// 1. V√©rifie et d√©code le token JWT
// 2. Recherche l'utilisateur correspondant
// 3. Hache le nouveau mot de passe de mani√®re s√©curis√©e
// 4. Met √† jour l'utilisateur en base de donn√©es
  const resetPassword = async (req, res) => {
    try {
      console.log("Requ√™te re√ßue :", req.body);
      console.log("Token re√ßu :", req.params.token); // V√©rifie que le token est bien pass√©
  
      const { newPassword } = req.body;
      const token = req.params.token; // R√©cup√©ration du token depuis l'URL
  
      if (!token) {
        console.error("Erreur : Aucun token re√ßu !");
        return res.status(400).json({ message: "Token is required" });
      }
  
      const decoded = jwt.verify(token, process.env.JWT_SECRET_KEY);
      console.log("Token d√©cod√© :", decoded);
  
      const user = await User.findById(decoded.userId);
      console.log("Utilisateur trouv√© :", user);
  
      if (!user) {
        return res.status(404).json({ message: "User not found" });
      }
  
      if (!newPassword) {
        console.error("Erreur : Aucun mot de passe re√ßu !");
        return res.status(400).json({ message: "New password is required" });
      }
  
      const salt = await bcrypt.genSalt(10);
      user.password = await bcrypt.hash(newPassword, salt);
      user.resetPasswordToken = null;
      await user.save();
  
      console.log("Mot de passe mis √† jour !");
      res.status(200).json({ message: "Password successfully updated" });
    } catch (error) {
      console.error("Erreur serveur :", error);
      res.status(500).json({ message: "Invalid or expired token", error: error.message });
    }
  };  

module.exports = { forgetPassword, resetPassword };